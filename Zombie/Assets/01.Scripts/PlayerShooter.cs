using UnityEngine;

public class PlayerShooter : MonoBehaviour
    //주어진 GUN 오브젝트를 쏘거나 재장전
    //알맞은 애니메이션을 재생하고 IK를 사용해 캐릭터 양손이 총에 위치하도록 조정
{
    public Gun gun; //사용할 총
    public Transform gunPivot; //총 배치의 기준점
    public Transform leftHandMount; //총의 왼쪽 손잡이, 왼손이 위치할 지점
    public Transform rightHandMount; //총의 오른쪽 손잡이, 오른손이 위치할 지점

    private PlayerInput playerInput; //플레이어의 입력
    private Animator playerAnimator; //애니메이터 컴포넌트

    private void Start() //사용할 컴포넌트 가져오기
    {
        playerInput = GetComponent<PlayerInput>();
        playerAnimator = GetComponent<Animator>();
    }

    private void OnEnable() //슈터가 활성화될 때 총도 함께 활성화
    {
        gun.gameObject.SetActive(true);
    }

    private void Update() //입력을 감지하고 총을 발사하거나 재장전
    {
        if (playerInput.fire) //프로퍼티로 확인
        {
            gun.Fire(); //발사 입력 감지 시 총 발사 /Gun의 Fire 메서드
        }
        else if (playerInput.reload) //프로퍼티로 확인
        {
            if (gun.Reload()) //재장전 입력 감지 시 재장전 /Gun의 Reload 메서드
            {
                playerAnimator.SetTrigger("Reload"); //재장전 성공 시에만 재장전 애니메이션 재생
            }
        }

        UpdateUI(); //남은 탄알 UI 갱신
    }

    private void UpdateUI() //탄알 UI 갱신
    {
        if (gun != null && UIManager.instance != null)
        {
            UIManager.instance.UpdateAmmoText(gun.magAmmo, gun.ammoRemain);
            //UI 매니저의 탄알 텍스트에 탄창의 탄알과 남은 전체 탄알 표시
        }
    }

    private void OnAnimatorIK(int layerIndex) //애니메이터의 IK 갱신
    {
        gunPivot.position = playerAnimator.GetIKHintPosition(AvatarIKHint.RightElbow);
        //총의 기준점 gunPivot을 3D 모델의 오른쪽 팔꿈치 위치로 이동
        //gunPivot는 애니메이터에서 수치를 가져와서 오브젝트에 적용
        //오브젝트 수치 변경

        
        //애니메이터 수치 변경
        //IK를 사용하여 왼손의 위치와 회전을 총의 왼쪽 손잡이에 맞춤
        playerAnimator.SetIKPositionWeight(AvatarIKGoal.LeftHand, 1.0f);
        playerAnimator.SetIKRotationWeight(AvatarIKGoal.LeftHand, 1.0f);
       
        playerAnimator.SetIKPosition(AvatarIKGoal.LeftHand, leftHandMount.position);
        playerAnimator.SetIKRotation(AvatarIKGoal.LeftHand, leftHandMount.rotation);
 
        
        //IK를 사용하여 오른손의 위치와 회전을 총의 오른쪽 손잡이에 맞춤
        playerAnimator.SetIKPositionWeight(AvatarIKGoal.RightHand, 1.0f);
        playerAnimator.SetIKRotationWeight(AvatarIKGoal.RightHand, 1.0f);
       
        playerAnimator.SetIKPosition(AvatarIKGoal.RightHand, rightHandMount.position);
        playerAnimator.SetIKRotation(AvatarIKGoal.RightHand, rightHandMount.rotation);


    }
}
