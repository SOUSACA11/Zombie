using System.Collections;
using UnityEngine;
using UnityEngine.AI; //AI, 내비게이션 시스템 관련 코드 가져오기

public class Zombie : LivingEntity //좀비 AI 구현
{
    public LayerMask whatIsTarget; //추적 대상 레이어

    private LivingEntity targetEntity; //추적대상
    private NavMeshAgent navMeshAgent; //경로 계산 AI 에이전트

    public ParticleSystem hitEffect; //피격 시 재생할 파티클 효과
    public AudioClip deathSound; //사망 시 재생할 소리
    public AudioClip hitSound; //피격 시 재생할 소리

    private Animator zombieAnimator; //애니메이터 컴포넌트
    private AudioSource zombieAudioPlayer; //오디오 소스 컴포넌트
    private Renderer zombieRenderer; //렌더러 컴포넌트

    public float damage = 20f; //공격력
    public float timeBetAttack = 0.5f; //공격 간격
    private float lastAttackTime; //마지막 공격 시점
 
    private bool hasTarget //추적할 대상이 존재하는지 알려주는 프로퍼티
    {
       get
        {
            if (targetEntity != null && !targetEntity.dead) 
                //추적할 대상이 존재하고, 대상이 사망하지 않았다면 true
            {
                return true;
            }

            return false; //그렇지 않다면 false
        }
    }

    private void Awake() //초기화
    {
        //게임 오브젝트로부터 사용할 컴포넌트 가져오기
        navMeshAgent = GetComponent<NavMeshAgent>();
        zombieAnimator = GetComponent<Animator>();
        zombieAudioPlayer = GetComponent<AudioSource>();

        //렌더러 컴포넌트는 자식 게임 오브젝트에 있으므로 GetComponentInChildren() 메서드 사용
        zombieRenderer = GetComponentInChildren<Renderer>();
    }

    public void Setup(ZombieData zombieData) //좀비 AI의 초기 스펙을 결정하는 셋업 메서드
    {
        //체력 설정
        startingHealth = zombieData.health;
        health = zombieData.damage;

        //공격력 설정
        damage = zombieData.damage;

        //내비메시 에이전트의 이동 속도 설정
       /// pathMeshAgent.speed = zombieData.speed;

        //렌더러가 사용 중인 머터리얼의 컬러를 변경, 외형 색이 변함
        zombieRenderer.material.color = zombieData.skinColor;

    }

    private void Start() //게임 오브젝트 활성화와 동시에 AI의 추적 루틴 시작
    {
        StartCoroutine(UpdatePath());
    }

    private void Update() //추적 대상의 존재 여부에 따라 다른 애니메이션 재생
    {
        zombieAnimator.SetBool("HasTarget", hasTarget);
    }

    private IEnumerator UpdatePath() //주기적으로 추적할 대상의 위치를 찾아 경로 갱신
    {
        while (!dead) //살아 있는 동안 무한 루프
        {
            yield return new WaitForSeconds(0.25f); //0.25초 주기로 처리 반복
        }
    }

    public override void OnDamage(float damage, Vector3 hitPoint, Vector3 hitNormal)
        //대미지를 입었을 때 실행할 처리
    {
        base.OnDamage(damage, hitPoint, hitNormal);
        //LivingEntity의 OnDamage()를 실행하여 대미지 적용
    }

    public override void Die() //사망 처리
    {
        base.Die();
        //LivingEntity의 Die()를 실행하여 기본 사망 처리 실행
    }

    private void OnTriggerStay(Collider other)
        //트리거 충돌한 상대방 게임 오브젝트가 추적 대상이라면 공격 실행
    {
        
    }
}
